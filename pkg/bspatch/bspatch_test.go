package bspatch

import (
	"bytes"
	"encoding/binary"
	"io/ioutil"
	"os"
	"testing"

	"github.com/gabstv/go-bsdiff/pkg/util"
)

func TestPatch(t *testing.T) {
	oldfile := []byte{
		0x66, 0xFF, 0xD1, 0x55, 0x56, 0x10, 0x30, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xD1,
	}
	newfilecomp := []byte{
		0x66, 0xFF, 0xD1, 0x55, 0x56, 0x10, 0x30, 0x00,
		0x44, 0x45, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0xD1, 0xFF, 0xD1,
	}
	patchfile := []byte{
		0x42, 0x53, 0x44, 0x49, 0x46, 0x46, 0x34, 0x30,
		0x29, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x2A, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x13, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x42, 0x5A, 0x68, 0x39, 0x31, 0x41, 0x59, 0x26,
		0x53, 0x59, 0xDA, 0xE4, 0x46, 0xF2, 0x00, 0x00,
		0x05, 0xC0, 0x00, 0x4A, 0x09, 0x20, 0x00, 0x22,
		0x34, 0xD9, 0x06, 0x06, 0x4B, 0x21, 0xEE, 0x17,
		0x72, 0x45, 0x38, 0x50, 0x90, 0xDA, 0xE4, 0x46,
		0xF2, 0x42, 0x5A, 0x68, 0x39, 0x31, 0x41, 0x59,
		0x26, 0x53, 0x59, 0x30, 0x88, 0x1C, 0x89, 0x00,
		0x00, 0x02, 0xC4, 0x00, 0x44, 0x00, 0x06, 0x00,
		0x20, 0x00, 0x21, 0x21, 0xA0, 0xC3, 0x1B, 0x03,
		0x3C, 0x5D, 0xC9, 0x14, 0xE1, 0x42, 0x40, 0xC2,
		0x20, 0x72, 0x24, 0x42, 0x5A, 0x68, 0x39, 0x31,
		0x41, 0x59, 0x26, 0x53, 0x59, 0x65, 0x25, 0x30,
		0x43, 0x00, 0x00, 0x00, 0x40, 0x02, 0xC0, 0x00,
		0x20, 0x00, 0x00, 0x00, 0xA0, 0x00, 0x22, 0x1F,
		0xA4, 0x19, 0x82, 0x58, 0x5D, 0xC9, 0x14, 0xE1,
		0x42, 0x41, 0x94, 0x94, 0xC1, 0x0C,
	}
	newfile, err := Bytes(oldfile, patchfile)
	if err != nil {
		t.Fatal(err)
	}
	if !bytes.Equal(newfile, newfilecomp) {
		t.Fatal("expected:", newfilecomp, "got:", newfile)
	}
}

func TestOfftin(t *testing.T) {
	buf := make([]byte, 8)
	binary.LittleEndian.PutUint64(buf, 9001)
	n := offtin(buf)
	if n != 9001 {
		t.Fatal(n, "!=", 9001)
	}
}

func TestReader(t *testing.T) {
	oldfile := []byte{
		0x66, 0xFF, 0xD1, 0x55, 0x56, 0x10, 0x30, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xD1,
	}
	patchfile := []byte{
		0x42, 0x53, 0x44, 0x49, 0x46, 0x46, 0x34, 0x30,
		0x29, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x2A, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x13, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x42, 0x5A, 0x68, 0x39, 0x31, 0x41, 0x59, 0x26,
		0x53, 0x59, 0xDA, 0xE4, 0x46, 0xF2, 0x00, 0x00,
		0x05, 0xC0, 0x00, 0x4A, 0x09, 0x20, 0x00, 0x22,
		0x34, 0xD9, 0x06, 0x06, 0x4B, 0x21, 0xEE, 0x17,
		0x72, 0x45, 0x38, 0x50, 0x90, 0xDA, 0xE4, 0x46,
		0xF2, 0x42, 0x5A, 0x68, 0x39, 0x31, 0x41, 0x59,
		0x26, 0x53, 0x59, 0x30, 0x88, 0x1C, 0x89, 0x00,
		0x00, 0x02, 0xC4, 0x00, 0x44, 0x00, 0x06, 0x00,
		0x20, 0x00, 0x21, 0x21, 0xA0, 0xC3, 0x1B, 0x03,
		0x3C, 0x5D, 0xC9, 0x14, 0xE1, 0x42, 0x40, 0xC2,
		0x20, 0x72, 0x24, 0x42, 0x5A, 0x68, 0x39, 0x31,
		0x41, 0x59, 0x26, 0x53, 0x59, 0x65, 0x25, 0x30,
		0x43, 0x00, 0x00, 0x00, 0x40, 0x02, 0xC0, 0x00,
		0x20, 0x00, 0x00, 0x00, 0xA0, 0x00, 0x22, 0x1F,
		0xA4, 0x19, 0x82, 0x58, 0x5D, 0xC9, 0x14, 0xE1,
		0x42, 0x41, 0x94, 0x94, 0xC1, 0x0C,
	}
	oldrdr := bytes.NewReader(oldfile)
	prdr := bytes.NewReader(patchfile)
	newf := new(bytes.Buffer)
	if err := Reader(oldrdr, newf, prdr); err != nil {
		t.Fatal(err)
	}
	buf := make([]byte, 8)
	newf.Read(buf)
	if !bytes.Equal(buf, []byte{0x66, 0xFF, 0xD1, 0x55, 0x56, 0x10, 0x30, 0x00}) {
		t.Fatal(buf)
	}
}

func TestFile(t *testing.T) {
	oldfile := []byte{
		0x66, 0xFF, 0xD1, 0x55, 0x56, 0x10, 0x30, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xD1,
	}
	patchfile := []byte{
		0x42, 0x53, 0x44, 0x49, 0x46, 0x46, 0x34, 0x30,
		0x29, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x2A, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x13, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x42, 0x5A, 0x68, 0x39, 0x31, 0x41, 0x59, 0x26,
		0x53, 0x59, 0xDA, 0xE4, 0x46, 0xF2, 0x00, 0x00,
		0x05, 0xC0, 0x00, 0x4A, 0x09, 0x20, 0x00, 0x22,
		0x34, 0xD9, 0x06, 0x06, 0x4B, 0x21, 0xEE, 0x17,
		0x72, 0x45, 0x38, 0x50, 0x90, 0xDA, 0xE4, 0x46,
		0xF2, 0x42, 0x5A, 0x68, 0x39, 0x31, 0x41, 0x59,
		0x26, 0x53, 0x59, 0x30, 0x88, 0x1C, 0x89, 0x00,
		0x00, 0x02, 0xC4, 0x00, 0x44, 0x00, 0x06, 0x00,
		0x20, 0x00, 0x21, 0x21, 0xA0, 0xC3, 0x1B, 0x03,
		0x3C, 0x5D, 0xC9, 0x14, 0xE1, 0x42, 0x40, 0xC2,
		0x20, 0x72, 0x24, 0x42, 0x5A, 0x68, 0x39, 0x31,
		0x41, 0x59, 0x26, 0x53, 0x59, 0x65, 0x25, 0x30,
		0x43, 0x00, 0x00, 0x00, 0x40, 0x02, 0xC0, 0x00,
		0x20, 0x00, 0x00, 0x00, 0xA0, 0x00, 0x22, 0x1F,
		0xA4, 0x19, 0x82, 0x58, 0x5D, 0xC9, 0x14, 0xE1,
		0x42, 0x41, 0x94, 0x94, 0xC1, 0x0C,
	}
	tf0, err := ioutil.TempFile(os.TempDir(), "")
	if err != nil {
		t.Fatal(err)
	}
	t0n := tf0.Name()
	tf1, err := ioutil.TempFile(os.TempDir(), "")
	if err != nil {
		t.Fatal(err)
	}
	t1n := tf1.Name()
	if err := util.PutWriter(tf0, oldfile); err != nil {
		tf0.Close()
		tf1.Close()
		os.Remove(t0n)
		os.Remove(t1n)
		t.Fatal(err)
	}
	if err := util.PutWriter(tf1, patchfile); err != nil {
		tf0.Close()
		tf1.Close()
		os.Remove(t0n)
		os.Remove(t1n)
		t.Fatal(err)
	}
	tf0.Close()
	tf1.Close()
	tp, err := ioutil.TempFile(os.TempDir(), "")
	if err != nil {
		os.Remove(t0n)
		os.Remove(t1n)
		t.Fatal(err)
	}
	tpp := tp.Name()
	tp.Close()
	if err := File(t0n, tpp, t1n); err != nil {
		os.Remove(t0n)
		os.Remove(t1n)
		os.Remove(tpp)
		t.Fatal(err)
	}
	os.Remove(t0n)
	os.Remove(t1n)
	os.Remove(tpp)
}
